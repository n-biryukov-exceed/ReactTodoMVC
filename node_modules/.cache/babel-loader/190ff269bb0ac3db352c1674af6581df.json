{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/my-todo-app/src/components/MainSection.js\";\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport Footer from './Footer';\nconst TODO_FILTERS = {\n  SHOW_ALL: () => true,\n  SHOW_ACTIVE: todo => !todo.completed,\n  SHOW_COMPLETED: todo => todo.completed\n};\nexport default class MainSection extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filter: 'SHOW_ALL'\n    };\n\n    this.handleClearCompleted = () => {\n      this.props.actions.clearCompleted();\n    };\n\n    this.handleShow = filter => {\n      this.setState({\n        filter\n      });\n    };\n  }\n\n  renderToggleAll(completedCount) {\n    const {\n      todos,\n      actions\n    } = this.props;\n\n    if (todos.length > 0) {\n      return React.createElement(\"section\", {\n        className: \"main2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"toggle-all\",\n        className: \"toggle-all\",\n        type: \"checkbox\",\n        checked: completedCount === todos.length,\n        onChange: actions.completeAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"toggle-all\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderFooter(completedCount) {\n    const {\n      todos\n    } = this.props;\n    const {\n      filter\n    } = this.state;\n    const activeCount = todos.length - completedCount;\n\n    if (todos.length) {\n      return React.createElement(Footer, {\n        completedCount: completedCount,\n        activeCount: activeCount,\n        filter: filter,\n        onClearCompleted: this.handleClearCompleted.bind(this),\n        onShow: this.handleShow.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      actions\n    } = this.props;\n    const {\n      filter\n    } = this.state;\n    const filteredTodos = todos.filter(TODO_FILTERS[filter]);\n    const completedCount = todos.reduce((count, todo) => {\n      return todo.completed ? count + 1 : count;\n    }, 0);\n    return React.createElement(\"section\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.renderToggleAll(completedCount), React.createElement(\"ul\", {\n      className: \"todo-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, filteredTodos.map(todo => React.createElement(TodoItem, Object.assign({\n      key: todo.id,\n      todo: todo\n    }, actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })))), this.renderFooter(completedCount));\n  }\n\n}","map":{"version":3,"sources":["/home/user/Desktop/my-todo-app/src/components/MainSection.js"],"names":["React","Component","TodoItem","Footer","TODO_FILTERS","SHOW_ALL","SHOW_ACTIVE","todo","completed","SHOW_COMPLETED","MainSection","state","filter","handleClearCompleted","props","actions","clearCompleted","handleShow","setState","renderToggleAll","completedCount","todos","length","completeAll","renderFooter","activeCount","bind","render","filteredTodos","reduce","count","map","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport TodoItem from './TodoItem'\nimport Footer from './Footer'\n\n const TODO_FILTERS = {\n   SHOW_ALL: () => true,\n   SHOW_ACTIVE: todo => !todo.completed,\n   SHOW_COMPLETED: todo => todo.completed\n }\n\n export default class MainSection extends Component {\n   state = { filter: 'SHOW_ALL' }\n\n   handleClearCompleted = () => {\n     this.props.actions.clearCompleted()\n   }\n\n   handleShow = filter => {\n     this.setState({ filter })\n   }\n\n   renderToggleAll(completedCount) {\n     const { todos, actions } = this.props\n     if (todos.length > 0) {\n       return (\n         <section className=\"main2\">\n         <input\n           id=\"toggle-all\"\n           className=\"toggle-all\"\n           type=\"checkbox\"\n           checked={completedCount === todos.length}\n           onChange={actions.completeAll}\n         />\n         <label\n          htmlFor=\"toggle-all\">\n         </label>\n        </section>\n       )\n     }\n   }\n\n   renderFooter(completedCount) {\n     const { todos } = this.props\n     const { filter } = this.state\n     const activeCount = todos.length - completedCount\n\n     if (todos.length) {\n       return (\n         <Footer\n           completedCount={completedCount}\n           activeCount={activeCount}\n           filter={filter}\n           onClearCompleted={this.handleClearCompleted.bind(this)}\n           onShow={this.handleShow.bind(this)} />\n       )\n     }\n   }\n\n   render() {\n     const { todos, actions } = this.props\n     const { filter } = this.state\n\n     const filteredTodos = todos.filter(TODO_FILTERS[filter])\n     const completedCount = todos.reduce((count, todo) => {\n       return todo.completed ? count + 1 : count\n     }, 0)\n\n     return (\n       <section className=\"main\">\n         {this.renderToggleAll(completedCount)}\n         <ul className=\"todo-list\">\n           {filteredTodos.map(todo =>\n             <TodoItem key={todo.id} todo={todo} {...actions} />\n           )}\n         </ul>\n         {this.renderFooter(completedCount)}\n       </section>\n     )\n   }\n }\n"]},"metadata":{},"sourceType":"module"}